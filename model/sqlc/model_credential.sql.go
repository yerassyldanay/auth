// Code generated by sqlc. DO NOT EDIT.
// source: model_credential.sql

package database

import (
	"context"
	"database/sql"
)

const credentialCreateOne = `-- name: CredentialCreateOne :one
insert into credentials (username, password, created_at) values ($1, $2, $3) returning id, username, password, created_at
`

type CredentialCreateOneParams struct {
	Username  string       `json:"username"`
	Password  string       `json:"password"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CredentialCreateOne(ctx context.Context, arg CredentialCreateOneParams) (Credential, error) {
	row := q.db.QueryRowContext(ctx, credentialCreateOne, arg.Username, arg.Password, arg.CreatedAt)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const credentialGetById = `-- name: CredentialGetById :one
select id, username, password, created_at from credentials where id = $1 limit 1
`

func (q *Queries) CredentialGetById(ctx context.Context, id int64) (Credential, error) {
	row := q.db.QueryRowContext(ctx, credentialGetById, id)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const credentialGetByUsername = `-- name: CredentialGetByUsername :one
select id, username, password, created_at from credentials where username = $1 limit 1
`

func (q *Queries) CredentialGetByUsername(ctx context.Context, username string) (Credential, error) {
	row := q.db.QueryRowContext(ctx, credentialGetByUsername, username)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const credentialResetPasswordById = `-- name: CredentialResetPasswordById :one
update credentials set password = $1 where id = $2 returning id, username, password, created_at
`

type CredentialResetPasswordByIdParams struct {
	Password string `json:"password"`
	ID       int64  `json:"id"`
}

func (q *Queries) CredentialResetPasswordById(ctx context.Context, arg CredentialResetPasswordByIdParams) (Credential, error) {
	row := q.db.QueryRowContext(ctx, credentialResetPasswordById, arg.Password, arg.ID)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const credentialResetPasswordByUsername = `-- name: CredentialResetPasswordByUsername :one
update credentials set password = $1 where username = $2 returning id, username, password, created_at
`

type CredentialResetPasswordByUsernameParams struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (q *Queries) CredentialResetPasswordByUsername(ctx context.Context, arg CredentialResetPasswordByUsernameParams) (Credential, error) {
	row := q.db.QueryRowContext(ctx, credentialResetPasswordByUsername, arg.Password, arg.Username)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
