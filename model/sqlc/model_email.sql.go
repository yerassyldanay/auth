// Code generated by sqlc. DO NOT EDIT.
// source: model_email.sql

package database

import (
	"context"
	"database/sql"
)

const emailConfirmByAddress = `-- name: EmailConfirmByAddress :one
update emails set is_email_confirmed = true, email_confirmed_at = now() where address = $1 returning id, address, email_confirmed_at, is_email_confirmed
`

func (q *Queries) EmailConfirmByAddress(ctx context.Context, address sql.NullString) (Email, error) {
	row := q.db.QueryRowContext(ctx, emailConfirmByAddress, address)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.EmailConfirmedAt,
		&i.IsEmailConfirmed,
	)
	return i, err
}

const emailConfirmById = `-- name: EmailConfirmById :one
update emails set is_email_confirmed = true, email_confirmed_at = now() where id = $1 returning id, address, email_confirmed_at, is_email_confirmed
`

func (q *Queries) EmailConfirmById(ctx context.Context, id int64) (Email, error) {
	row := q.db.QueryRowContext(ctx, emailConfirmById, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.EmailConfirmedAt,
		&i.IsEmailConfirmed,
	)
	return i, err
}

const emailCreateConfirmedOne = `-- name: EmailCreateConfirmedOne :one
insert into emails (address, email_confirmed_at, is_email_confirmed) values ($1, $2, $3) returning id, address, email_confirmed_at, is_email_confirmed
`

type EmailCreateConfirmedOneParams struct {
	Address          sql.NullString `json:"address"`
	EmailConfirmedAt sql.NullTime   `json:"email_confirmed_at"`
	IsEmailConfirmed sql.NullBool   `json:"is_email_confirmed"`
}

func (q *Queries) EmailCreateConfirmedOne(ctx context.Context, arg EmailCreateConfirmedOneParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, emailCreateConfirmedOne, arg.Address, arg.EmailConfirmedAt, arg.IsEmailConfirmed)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.EmailConfirmedAt,
		&i.IsEmailConfirmed,
	)
	return i, err
}

const emailCreateOne = `-- name: EmailCreateOne :one
insert into emails (address) values ($1) returning id, address, email_confirmed_at, is_email_confirmed
`

func (q *Queries) EmailCreateOne(ctx context.Context, address sql.NullString) (Email, error) {
	row := q.db.QueryRowContext(ctx, emailCreateOne, address)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.EmailConfirmedAt,
		&i.IsEmailConfirmed,
	)
	return i, err
}

const emailDeleteByAddress = `-- name: EmailDeleteByAddress :one
delete from emails where id = $1 returning id, address, email_confirmed_at, is_email_confirmed
`

func (q *Queries) EmailDeleteByAddress(ctx context.Context, id int64) (Email, error) {
	row := q.db.QueryRowContext(ctx, emailDeleteByAddress, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.EmailConfirmedAt,
		&i.IsEmailConfirmed,
	)
	return i, err
}

const emailDeleteById = `-- name: EmailDeleteById :one
delete from emails where id = $1 returning id, address, email_confirmed_at, is_email_confirmed
`

func (q *Queries) EmailDeleteById(ctx context.Context, id int64) (Email, error) {
	row := q.db.QueryRowContext(ctx, emailDeleteById, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.EmailConfirmedAt,
		&i.IsEmailConfirmed,
	)
	return i, err
}
