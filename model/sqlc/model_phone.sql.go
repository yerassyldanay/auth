// Code generated by sqlc. DO NOT EDIT.
// source: model_phone.sql

package database

import (
	"context"
	"database/sql"
)

const phoneConfirmById = `-- name: PhoneConfirmById :one
update phones set phone_confirmed_at = $1 where id = $2 returning id, country_code, number, phone_confirmed_at
`

type PhoneConfirmByIdParams struct {
	PhoneConfirmedAt sql.NullTime `json:"phone_confirmed_at"`
	ID               int64        `json:"id"`
}

func (q *Queries) PhoneConfirmById(ctx context.Context, arg PhoneConfirmByIdParams) (Phone, error) {
	row := q.db.QueryRowContext(ctx, phoneConfirmById, arg.PhoneConfirmedAt, arg.ID)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Number,
		&i.PhoneConfirmedAt,
	)
	return i, err
}

const phoneConfirmByNumberAndCountryCode = `-- name: PhoneConfirmByNumberAndCountryCode :one
update phones set phone_confirmed_at = $1
where number = $2 and country_code = $3 returning id, country_code, number, phone_confirmed_at
`

type PhoneConfirmByNumberAndCountryCodeParams struct {
	PhoneConfirmedAt sql.NullTime `json:"phone_confirmed_at"`
	Number           string       `json:"number"`
	CountryCode      string       `json:"country_code"`
}

func (q *Queries) PhoneConfirmByNumberAndCountryCode(ctx context.Context, arg PhoneConfirmByNumberAndCountryCodeParams) (Phone, error) {
	row := q.db.QueryRowContext(ctx, phoneConfirmByNumberAndCountryCode, arg.PhoneConfirmedAt, arg.Number, arg.CountryCode)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Number,
		&i.PhoneConfirmedAt,
	)
	return i, err
}

const phoneCreateOne = `-- name: PhoneCreateOne :one
insert into phones (country_code, number, phone_confirmed_at)
values ($1, $2, $3) returning id, country_code, number, phone_confirmed_at
`

type PhoneCreateOneParams struct {
	CountryCode      string       `json:"country_code"`
	Number           string       `json:"number"`
	PhoneConfirmedAt sql.NullTime `json:"phone_confirmed_at"`
}

func (q *Queries) PhoneCreateOne(ctx context.Context, arg PhoneCreateOneParams) (Phone, error) {
	row := q.db.QueryRowContext(ctx, phoneCreateOne, arg.CountryCode, arg.Number, arg.PhoneConfirmedAt)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Number,
		&i.PhoneConfirmedAt,
	)
	return i, err
}

const phoneDeleteByCountryCodeAndNumber = `-- name: PhoneDeleteByCountryCodeAndNumber :one
delete from phones where number = $1 and country_code = $2 returning id, country_code, number, phone_confirmed_at
`

type PhoneDeleteByCountryCodeAndNumberParams struct {
	Number      string `json:"number"`
	CountryCode string `json:"country_code"`
}

func (q *Queries) PhoneDeleteByCountryCodeAndNumber(ctx context.Context, arg PhoneDeleteByCountryCodeAndNumberParams) (Phone, error) {
	row := q.db.QueryRowContext(ctx, phoneDeleteByCountryCodeAndNumber, arg.Number, arg.CountryCode)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Number,
		&i.PhoneConfirmedAt,
	)
	return i, err
}

const phoneDeleteById = `-- name: PhoneDeleteById :one
delete from phones where id = $1 returning id, country_code, number, phone_confirmed_at
`

func (q *Queries) PhoneDeleteById(ctx context.Context, id int64) (Phone, error) {
	row := q.db.QueryRowContext(ctx, phoneDeleteById, id)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Number,
		&i.PhoneConfirmedAt,
	)
	return i, err
}

const phoneGetById = `-- name: PhoneGetById :one
select id, country_code, number, phone_confirmed_at from phones where id = $1 limit 1
`

func (q *Queries) PhoneGetById(ctx context.Context, id int64) (Phone, error) {
	row := q.db.QueryRowContext(ctx, phoneGetById, id)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Number,
		&i.PhoneConfirmedAt,
	)
	return i, err
}

const phoneGetByNumberAndCountryCode = `-- name: PhoneGetByNumberAndCountryCode :one
select id, country_code, number, phone_confirmed_at from phones where country_code = $1 and number = $2 limit 1
`

type PhoneGetByNumberAndCountryCodeParams struct {
	CountryCode string `json:"country_code"`
	Number      string `json:"number"`
}

func (q *Queries) PhoneGetByNumberAndCountryCode(ctx context.Context, arg PhoneGetByNumberAndCountryCodeParams) (Phone, error) {
	row := q.db.QueryRowContext(ctx, phoneGetByNumberAndCountryCode, arg.CountryCode, arg.Number)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Number,
		&i.PhoneConfirmedAt,
	)
	return i, err
}
