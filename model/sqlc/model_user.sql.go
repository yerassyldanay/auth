// Code generated by sqlc. DO NOT EDIT.
// source: model_user.sql

package database

import (
	"context"
	"database/sql"
)

const userCreateOne = `-- name: UserCreateOne :one
insert into users (name, password, description, email_id, phone_id, linked_in_id, role_id, created_at)
values ($1, $2, $3, $4, $5, $6, $7, $8) returning id, name, description, password, avatar_uri, email_id, phone_id, linked_in_id, created_at, role_id
`

type UserCreateOneParams struct {
	Name        string         `json:"name"`
	Password    sql.NullString `json:"password"`
	Description sql.NullString `json:"description"`
	EmailID     sql.NullInt64  `json:"email_id"`
	PhoneID     sql.NullInt64  `json:"phone_id"`
	LinkedInID  sql.NullInt64  `json:"linked_in_id"`
	RoleID      sql.NullInt64  `json:"role_id"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) UserCreateOne(ctx context.Context, arg UserCreateOneParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userCreateOne,
		arg.Name,
		arg.Password,
		arg.Description,
		arg.EmailID,
		arg.PhoneID,
		arg.LinkedInID,
		arg.RoleID,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Password,
		&i.AvatarUri,
		&i.EmailID,
		&i.PhoneID,
		&i.LinkedInID,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}

const userDeleteById = `-- name: UserDeleteById :one
delete from users where id = $1 returning id, name, description, password, avatar_uri, email_id, phone_id, linked_in_id, created_at, role_id
`

func (q *Queries) UserDeleteById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, userDeleteById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Password,
		&i.AvatarUri,
		&i.EmailID,
		&i.PhoneID,
		&i.LinkedInID,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}

const userGetById = `-- name: UserGetById :one
select id, name, description, password, avatar_uri, email_id, phone_id, linked_in_id, created_at, role_id from users where id = $1 limit 1
`

func (q *Queries) UserGetById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, userGetById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Password,
		&i.AvatarUri,
		&i.EmailID,
		&i.PhoneID,
		&i.LinkedInID,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}

const userGetOneByEmailAddress = `-- name: UserGetOneByEmailAddress :one
select u.id, u.name, u.description, u.password, u.avatar_uri, u.email_id, u.phone_id, u.linked_in_id, u.created_at, u.role_id from users u join emails e on e.id = u.email_id
where e.address = $1 limit 1
`

func (q *Queries) UserGetOneByEmailAddress(ctx context.Context, address string) (User, error) {
	row := q.db.QueryRowContext(ctx, userGetOneByEmailAddress, address)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Password,
		&i.AvatarUri,
		&i.EmailID,
		&i.PhoneID,
		&i.LinkedInID,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}

const userGetOneByEmailId = `-- name: UserGetOneByEmailId :one
select u.id, u.name, u.description, u.password, u.avatar_uri, u.email_id, u.phone_id, u.linked_in_id, u.created_at, u.role_id from users u join emails e on e.id = u.email_id
where e.id = $1 limit 1
`

func (q *Queries) UserGetOneByEmailId(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, userGetOneByEmailId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Password,
		&i.AvatarUri,
		&i.EmailID,
		&i.PhoneID,
		&i.LinkedInID,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}

const userGetPreloadedById = `-- name: UserGetPreloadedById :one
select u.id, u.name, u.description, u.password, u.avatar_uri, u.email_id, u.phone_id, u.linked_in_id, u.created_at, u.role_id, e.id, e.address, e.email_confirmed_at, p.id, li.id, li.login, li.linked_in_confirmed_at from users u
join emails e on e.id = u.email_id
join phones p on p.id = u.phone_id
join linked_ins li on li.id = u.linked_in_id
where u.id = $1
`

type UserGetPreloadedByIdRow struct {
	ID                  int64          `json:"id"`
	Name                string         `json:"name"`
	Description         sql.NullString `json:"description"`
	Password            sql.NullString `json:"password"`
	AvatarUri           sql.NullString `json:"avatar_uri"`
	EmailID             sql.NullInt64  `json:"email_id"`
	PhoneID             sql.NullInt64  `json:"phone_id"`
	LinkedInID          sql.NullInt64  `json:"linked_in_id"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	RoleID              sql.NullInt64  `json:"role_id"`
	ID_2                int64          `json:"id_2"`
	Address             string         `json:"address"`
	EmailConfirmedAt    sql.NullTime   `json:"email_confirmed_at"`
	ID_3                int64          `json:"id_3"`
	ID_4                int64          `json:"id_4"`
	Login               sql.NullString `json:"login"`
	LinkedInConfirmedAt sql.NullTime   `json:"linked_in_confirmed_at"`
}

func (q *Queries) UserGetPreloadedById(ctx context.Context, id int64) (UserGetPreloadedByIdRow, error) {
	row := q.db.QueryRowContext(ctx, userGetPreloadedById, id)
	var i UserGetPreloadedByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Password,
		&i.AvatarUri,
		&i.EmailID,
		&i.PhoneID,
		&i.LinkedInID,
		&i.CreatedAt,
		&i.RoleID,
		&i.ID_2,
		&i.Address,
		&i.EmailConfirmedAt,
		&i.ID_3,
		&i.ID_4,
		&i.Login,
		&i.LinkedInConfirmedAt,
	)
	return i, err
}

const userSetAvatarUriById = `-- name: UserSetAvatarUriById :one
update users set avatar_uri = $1 where id = $2 returning id, name, description, password, avatar_uri, email_id, phone_id, linked_in_id, created_at, role_id
`

type UserSetAvatarUriByIdParams struct {
	AvatarUri sql.NullString `json:"avatar_uri"`
	ID        int64          `json:"id"`
}

func (q *Queries) UserSetAvatarUriById(ctx context.Context, arg UserSetAvatarUriByIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userSetAvatarUriById, arg.AvatarUri, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Password,
		&i.AvatarUri,
		&i.EmailID,
		&i.PhoneID,
		&i.LinkedInID,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}
